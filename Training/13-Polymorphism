#include <iostream>
using namespace std;

class Shape {
protected:
    int weight, height;
public:
    void setValues(int weight, int height) {
        this->weight = weight;
        this->height = height;
    }
    virtual int area() {                         // if we dont write virtual all cout's gives base class's area which means 0.
        return 0;
    }
};

class Triangle: public Shape {
public:
    int area() {
        return (height * weight) / 2;
    }
};

class Square : public Shape {
public:
    int area() {
        return (height * weight);
    }
};

int main() {
    Triangle s1;
    Square s2;
    Shape s3;


    Shape* t1 = &s1;
    Shape* sq1 =&s2;

    t1->setValues(3, 4);
    sq1->setValues(3, 4);

    cout << t1->area() << endl;                         //6
    cout << sq1->area() << endl;                        //12
    cout << s3.area() << endl;                          //0
    
    
    /*
    Shape* array[3];                                      // IT'S ALSO GIVES ALL ZERO LIKE POINTER ONE.
    array[0] = &s1;
    array[1] = &s2;
    array[2] = &s3;

    array[0]->setValues(3, 4);
    array[1]->setValues(3, 4);
    array[2]->setValues(3, 4);

    cout << array[0]->area() << endl;               //6
    cout << array[1]->area() << endl;               //12
    cout << array[2]->area() << endl;               //0
    */
    
    
    
    return 0;
}



*****************************************************************************************************************************************************************************

// ANOTHER EXAMPLE


#include <iostream>
using namespace std;

class Animal {
public:
    void sound() {
        cout << "Animal Sounds" << endl;
    }
};


class Cat : public Animal {
public:
    void sound() {
        cout << "meow" << endl;
    }
};

// Derived class
class Dog : public Animal {
public:
    void sound() {
        cout << "woof" << endl;
    }
};

int main() {
    Animal a1;
    Cat a2;
    Dog a3;

    a1.sound();
    a2.sound();
    a3.sound();

    return 0;
}
