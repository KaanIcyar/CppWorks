//  QUEUE #1

#include <iostream>
#include <queue>

using namespace std;

void print(queue<int> q1) {               
    while (q1.size() > 0) {
        cout << q1.front() << " ";
        q1.pop();
    }
    cout << endl;


}

int main()
{
    queue<int> q1;
    q1.push(4);
    q1.push(3);
    q1.push(7);
    q1.push(65);
    q1.push(32);

    print(q1);          // 4 3 7 65 32

    q1.pop();           // it delete's first element of the queue
   
    print(q1);          // 3 7 65 32

    cout << "Front of queue : "<<q1.front() << endl;         // 3

    cout << "Back of queue : " << q1.back() << endl;        // 32

    cout << "Is queue empty? : " << q1.empty() << endl;     // 0 (means false)
    
    return 0;
}

*******************************************************************************************************************************************************************************

//  QUEUE #2

#include <iostream>
#include <queue>

using namespace std;

void print(queue<int> &q1) {                    // it's deletes all the queue because we sending q1's reference.
    while (q1.size() > 0) {
        cout << q1.front() << " ";
        q1.pop();
    }
    cout << endl;

   
}

int main()
{
    queue<int> q1;
    q1.push(4);
    q1.push(3);
    q1.push(7);
    q1.push(65);
    q1.push(32);

    print(q1);          // 4 3 7 65 32
       
    print(q1);          // it's prints nothing.
    
    return 0;
}

*******************************************************************************************************************************************************************************


// QUEUE #3

#include <iostream>
#include <queue>
using namespace std;

class Human {
private:
    string name;
public:
    Human(string name) {
        this->name = name;
    }

    string getName() {
        return name;
    }
};

int main() {

    queue<Human> humans;

    humans.push(Human("Kaan"));
    humans.push(Human("Ahmet"));
    humans.push(Human("Mehmet"));

    while (humans.size() > 0) {
        Human& h1 = humans.front();                 // We assign "Mehmet"'s adress to h1.
        cout << h1.getName() << endl;
        humans.pop();
    }

    return 0;
}

*******************************************************************************************************************************************************************************

//STACK #1

#include<iostream>
#include<stack>
using namespace std;


void print(stack<int> s1) {
    while (s1.size() > 0) {
        cout << s1.top() << " ";
        s1.pop();
    }
    cout << endl;
}

int main() {
    stack<int> s1;

    s1.push(21);
    s1.push(2);
    s1.push(6);
    s1.push(65);
    s1.push(9);

    print(s1); //9 65 6 2 21

    s1.pop();

    print(s1); //65 6 2 21           It deleted 9 because stack is LIFO(last in first out)

    cout << "Top :" << s1.top() << endl;  //65

   
    return 0;
}
****************************************************************************************************************************************************************************

//STACK #2

#include<iostream>
#include<stack>
using namespace std;


void print(stack<int> &s1) {
    while (s1.size() > 0) {
        cout << s1.top() << " ";
        s1.pop();
    }
    cout << endl;
}

int main() {
    stack<int> s1;

    s1.push(21);
    s1.push(2);
    s1.push(6);
    s1.push(65);
    s1.push(9);

    print(s1); //9 65 6 2 21


    print(s1); // it deleted all 

    return 0;
}

****************************************************************************************************************************************************************************

//STACK #3

#include<iostream>
#include<stack>
using namespace std;


class Human {
private:
    string name;
public:
    Human(string name) {
        this->name = name;
    }
    string getName() {
        return name;
    }
};

int main() {
    stack<Human> humans;

    humans.push(Human("Kaan"));
    humans.push(Human("Ahmet"));
    humans.push(Human("Mehmet"));

    while (humans.size() > 0) {
        Human& h1 = humans.top();
        cout << h1.getName() << endl;
        humans.pop();
    }


    cout << humans.size() << endl;              // 0

    return 0;
}


